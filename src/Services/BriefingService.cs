// Replaced to fix CI syntax errors (interpolated/verbatim string issues).
// This version avoids fragile escaping and offers simple, testable APIs.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Services
{
    /// <summary>
    /// Builds a simple daily brief text block. Keeps dependencies minimal so unit tests stay fast & robust.
    /// </summary>
    public class BriefingService
    {
        /// <summary>Create a brief for the given timestamp (local time).</summary>
        public string Generate(DateTime nowLocal)
            => BuildDailyBrief(nowLocal, headlines: Array.Empty<string>(), quote: null);

        /// <summary>Async alias.</summary>
        public Task<string> GenerateAsync(DateTime nowLocal, CancellationToken ct = default)
            => Task.FromResult(Generate(nowLocal));

        /// <summary>Overload used by tests or callers that want to pass content explicitly.</summary>
        public string BuildDailyBrief(DateTime nowLocal, IEnumerable<string>? headlines, string? quote)
        {
            var date = nowLocal.ToString("yyyy-MM-dd");
            var sb = new StringBuilder();

            sb.AppendLine($"# Daily Brief — {date}");
            sb.AppendLine();

            if (!string.IsNullOrWhiteSpace(quote))
            {
                // Render quote in Markdown-style block
                sb.Append("> ");
                sb.AppendLine(quote!.Trim());
                sb.AppendLine();
            }

            var items = (headlines ?? Enumerable.Empty<string>()).Where(h => !string.IsNullOrWhiteSpace(h)).Take(8).ToList();
            if (items.Count > 0)
            {
                sb.AppendLine("Top headlines:");
                foreach (var h in items)
                {
                    sb.Append(" • ");
                    sb.AppendLine(h.Trim());
                }
                sb.AppendLine();
            }

            sb.AppendLine("_Generated by Trader Forge_");
            return sb.ToString();
        }
    }
}
